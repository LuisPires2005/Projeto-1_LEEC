#include <LiquidCrystal.h>
LiquidCrystal lcd(7, 6, 5, 4, 3, 2); // Pinos LCD

// Variáveis do cronômetro
int horas = 0;
int minutos = 0;
int segundos = 0;
int decimas = 0;
long ultimoTempoCronometro = 0;
int button = 10;
int pausa = 9;

// Variáveis do LDR e LED RGB
int LDR = A0; // Pino do sensor LDR
int valorldr; // Valor lido pelo LDR
const int redPin = 11;
const int greenPin = 12;
const int bluePin = 13;
long ultimoTempoLDR = 0;

// Intervalos de tempo
const long intervaloCronometro = 100; // Atualização a cada décimo de segundo
const long intervaloLDR = 50;        // Leitura do LDR a cada 50 ms

void setup() {
  // Configurações do cronômetro
  Serial.begin(9600);
  pinMode(button, INPUT);
  digitalWrite(button, LOW);
  pinMode(pausa, INPUT);
  digitalWrite(pausa, LOW);
  lcd.begin(16, 2);

  // Configurações do LED RGB
  pinMode(LDR, INPUT);
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);

  // Mensagem inicial no monitor serial
  Serial.println("Digite três valores (0 a 255) para cada cor do LED RGB:");
  Serial.println("Formato: R G B");
}

void loop() {
  unsigned long tempoAtual = millis();

  // ==== Cronômetro ====
  if (digitalRead(button) == HIGH) {
    horas = 0;
    minutos = 0;
    segundos = 0;
    decimas = 0;
    lcd.clear();
  }

  if (digitalRead(pausa) == HIGH) {
    delay(200);
    while (digitalRead(pausa) == LOW);
    delay(200);
  }

  if (tempoAtual - ultimoTempoCronometro >= intervaloCronometro) {
    ultimoTempoCronometro = tempoAtual;
    decimas++;
    if (decimas == 10) {
      decimas = 0;
      segundos++;
    }
    if (segundos == 60) {
      segundos = 0;
      minutos++;
    }
    if (minutos == 60) {
      minutos = 0;
      horas++;
    }

    // Atualiza o display LCD
    lcd.setCursor(0, 0);
    if (horas < 10) lcd.print("0");
    lcd.print(horas);
    lcd.print(":");
    if (minutos < 10) lcd.print("0");
    lcd.print(minutos);
    lcd.print(":");
    if (segundos < 10) lcd.print("0");
    lcd.print(segundos);
    lcd.print(":");
    lcd.setCursor(9, 0);
    lcd.print(decimas);
  }

  // ==== LDR e LED RGB ====
  if (tempoAtual - ultimoTempoLDR >= intervaloLDR) {
    ultimoTempoLDR = tempoAtual;
    valorldr = analogRead(LDR);
    Serial.print("Valor lido pelo LDR = ");
    Serial.println(valorldr);

    // Verifica entrada no monitor serial
    if (Serial.available() > 0) {
      int redValue = Serial.parseInt();
      int greenValue = Serial.parseInt();
      int blueValue = Serial.parseInt();

      if (redValue >= 0 && redValue <= 255 &&
          greenValue >= 0 && greenValue <= 255 &&
          blueValue >= 0 && blueValue <= 255) {
        analogWrite(redPin, redValue);
        analogWrite(greenPin, greenValue);
        analogWrite(bluePin, blueValue);

        Serial.print("Vermelho: ");
        Serial.println(redValue);
        Serial.print("Verde: ");
        Serial.println(greenValue);
        Serial.print("Azul: ");
        Serial.println(blueValue);
      } else {
        Serial.println("Por favor, insira valores entre 0 e 255 para cada cor.");
      }

      while (Serial.available() > 0) {
        Serial.read();
      }
    }
  }
}
